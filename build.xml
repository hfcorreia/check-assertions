<?xml version="1.0" encoding="UTF-8"?>
<project name="checkassertions" basedir=".">
	<property name="src" location="src" />
	<property name="build" location="bin" />
	<property name="base" value="ist.meic.pa" />
	<property name="test" value="test" />
	<property name="resources" value="resources" />
	<property name="main" value="${base}.CheckAssertions" />

	<path id="external.jars">
		<fileset dir="${resources}" includes="**/*.jar" />
	</path>

	<path id="project.classpath">
		<pathelement location="${src}" />
		<pathelement location="${build}" />
		<path refid="external.jars" />
	</path>

	<target name="init" description="Setup build dir">
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init">
		<javac destdir="${build}" includeantruntime="false" debug="true" debuglevel="lines,vars,source">
			<src path="${src}" />
			<classpath refid="project.classpath" />
		</javac>
		<javac destdir="${build}" includeantruntime="false" debug="true" debuglevel="lines,vars,source">
			<src path="${test}" />
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<target name="test-methodReturn" depends="compile"
		description="Tests if the return of the methods is valid.">
		<java classname="${main}" fork="true">
			<arg value="${base}.methodReturn.TestMethodReturn" />
			<arg value="method" />
			<classpath refid="project.classpath" />
		</java>
	</target>
	
		<target name="test-methodBefore" depends="compile"
		description="Tests if the return of the methods is valid with the beforemethod annotation.">
		<java classname="${main}" fork="true">
			<arg value="${base}.methodBefore.TestMethodReturn" />
			<arg value="method" />
			<classpath refid="project.classpath" />
		</java>
	</target>

	<target name="test-fieldAssignment" depends="compile"
		description="Tests if the field annotations are valid.">
		<java classname="${main}" fork="true">
			<arg value="${base}.field.TestFieldAssignment" />
			<arg value="field" />
			<classpath refid="project.classpath" />
		</java>
	</target>

	<target name="test-fieldInitialization" depends="compile"
		description="Tests if the field with annotation are initialed.">
		<java classname="${main}" fork="true">
			<arg value="${base}.field.TestFieldInitialization" />
			<arg value="field" />
			<classpath refid="project.classpath" />
		</java>
	</target>

		<target name="test-constructor" depends="compile"
		description="Tests if the return of the methods is valid.">
		<java classname="${main}" fork="true">
			<arg value="${base}.constructor.TestConstructor" />
			<arg value="method" />
			<classpath refid="project.classpath" />
		</java>
	</target>
	
	   <target name="test-arrayInitializer" depends="compile"
	        description="Tests over arrays initialization.">
	        <java classname="${main}" fork="true">
	            <arg value="${base}.array.TestArrayInitializer" />
	            <arg value="method" />
	            <classpath refid="project.classpath" />
	        </java>
	    </target>

		<target name="test-cast" depends="compile"
		description="Tests if the casts are valid.">
		<java classname="${main}" fork="true">
			<arg value="${base}.cast.TestCast" />
			<arg value="method" />
			<classpath refid="project.classpath" />
		</java>
	</target>
	
		<target name="test-catch" depends="compile"
		description="Tests if the casts are valid.">
		<java classname="${main}" fork="true">
			<arg value="${base}.handler.TestExceptionHandler" />
			<arg value="method" />
			<classpath refid="project.classpath" />
		</java>
	</target>
	
	<target name="clean" description="Cleans build files">
		<delete dir="${build}" />
        <delete dir="ist" />
	</target>
	
	<target name="test-all" description="Runs all the tests" 
		depends="test-fieldInitialization,test-fieldAssignment,test-methodReturn,test-constructor,test-arrayInitializer,test-cast,test-methodBefore, test-catch" />
	    

</project>
